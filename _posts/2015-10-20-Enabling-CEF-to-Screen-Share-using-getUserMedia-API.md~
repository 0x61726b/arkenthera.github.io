---
layout: post
title: "Enabling CEF to Screen Share using getUserMedia() API"
modified: 2015-10-20 00:00:00 -0700
tags: [CEF,getUserMedia,webrtc,c++,chromium,screen share]
image:
  feature: cplusplus.jpg
comments: 
share: 
---

This post/tutorial is intended for being able to teach you how to enable using native screen sharing API of chrome in a CEF
client.This is based on [buglloc](https://github.com/buglloc)'s work. His [patch](https://github.com/buglloc/cef-builds/blob/master/patches/allow_screen_sharing.patch)
is what allowed me to implement screen sharing on my CEF client.

#### Requirements
[Chromium Repository](https://bitbucket.org/chromiumembedded/cef/wiki/Home)

[CEF Screen Sharing Patch](https://github.com/buglloc/cef-builds/blob/master/patches/allow_screen_sharing.patch)

Screen sharing is already possible through getUserMedia but it got removed and moved to chrome extension API for some reason.In a CEF client,
when you call getUserMedia() it will call RequestUserMediaPermission on CefBrowserHost and we will intercept the call and create a MediaStreamDevice 
if the request is a "desktop media" request. On Chrome getUserMedia accepts an encrypted screen or window ID generated by chooseDesktopMedia method on the extension API. Then this code gets decrypted and turned into windows / screen IDs. On CEF, we have to pass a compatible screen or window ID to the MediaStreamDevice and the rest will be handled by WebRTC desktop capture API.
The difference file changes the **cef/libcef/browser/browser_host_impl.cc** file which gets processed when we call getUserMedia.

#### Applying the patch

Go to *chromium\src\cef\patch\patch.cfg* and add 
{% highlight ruby pygments %}

{
 'name': 'allow_screen_sharing',
 'path': '../cef/libcef/browser'
}

{% endhighlight %}

Copy the [patch](https://github.com/buglloc/cef-builds/blob/master/patches/allow_screen_sharing.patch) file to the
**patches** folder. Note that you need to change
{% highlight ruby pygments %}

diff --git a/libcef/browser/browser_host_impl.cc b/libcef/browser/browser_host_impl.cc

{% endhighlight %}

to

{% highlight ruby pygments %}

diff --git browser_host_impl.cc browser_host_impl.cc

{% endhighlight %}

After the patch configuration is done go to **cef\tools** and run patch.bat. You should see the allow_screen_patching applied at the end of the output.
After the patching complete run **translator.bat --root-dir** where root dir is the CEF dir which is **src\cef**.
All done,you need to compile the cefclient.Go to chromium source directory and run 

{% highlight ruby pygments %}

ninja -C out/Debug cefclient

{% endhighlight %}

Compiling should take 3-7 minutes depending on your system.After compiling is complete,CD to tools directory and run 
**make_distrib.bat** This will create a binary distribution which we will use in our CEF client.Note that this will create both *Debug* and *Release* builds for libcef.dll. If you only compiled one version before it might request to recompile in the other configuration,I didnt try so I'm not sure.After the distribution is generated,go to binary_distrib folder,pick your configuration(Debug/Release) then copy the folder into your CEF client.cefsimple isnt required.We should be ready now for the screen sharing allowed libcef.dll.


#### Adding the javascript function for screen/window IDs.

At this point,a simple test is recommended. Create a HTML file and a video node.Call getUserMedia() with desktop media constraint and "screen:0" as ID.
If everything is done correctly,your main monitor video stream should appear properly.


{% highlight ruby pygments %}
 var Constraints = {
        video: {
            mandatory: {
                chromeMediaSource: "desktop",
                chromeMediaSourceId: "screen:0"
            }
        }
    };
    getUserMedia(Constraints, handleUserMedia, handleUserMediaError);
{% endhighlight %}

Without writing any C++ code the above code sample will work if you correctly applied the patch and your primary monitor's video stream will be provided
in the handleUserMedia.

#### Generating Window IDs

As we are making a screen share application,we have to make user pick whatever he/she wants to share. The Chrome extension will prompt a nice dialog with little thumbnails of screens so I will try to make something like this:

<img src="/images/screenPicker.png"/>

Since we can already stream the video,this part is more about how to *generate* the ID so we can provide it to the chromeMediaSourceId.
The steps will be taken here are:

-Call a custom javascript method and return window/screen information to the javascript using a custom V8Handler.
-Generate window/screen IDs using Win32 API
-Create a CefListValue then return a CefV8Array
-Implement a custom CEF resource provider to send previews of windows/screens to the UI side.
-Iterate through the CefV8Array and create a UI like the picture above.

